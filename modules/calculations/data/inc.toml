[base]
base_line_column = "base_line"

[self_operations]
L = "lambda df: (df['FLEVEL'] != 0) * 0.5"
diff_A = "lambda df: (df['A+'] - df['A-']) / 2"
diff_B = "lambda df: (df['B+'] - df['B-']) / 2"
check_A = "lambda df: (df['A+'] + df['A-']) / 2"
check_B = "lambda df: (df['B+'] + df['B-']) / 2"
A_cm = "lambda df: df['L'] * df['diff_A'] * df['a_axis_scale']"
B_cm = "lambda df: df['L'] * df['diff_B'] * df['b_axis_scale']"
A_deflection_raw = "lambda df: df['A_cm'][::-1].cumsum()[::-1]"
B_deflection_raw = "lambda df: df['B_cm'][::-1].cumsum()[::-1]"
A_displacement = "lambda df: df['A_deflection_raw'] * np.cos(df['azimuth_rad']) - df['B_deflection_raw'] * np.sin(df['azimuth_rad'] - df['enbankment_slope_rad'])"
B_displacement = "lambda df: df['A_deflection_raw'] * np.sin(df['azimuth_rad']) + df['B_deflection_raw'] * np.cos(df['azimuth_rad'] - df['enbankment_slope_rad'])"

[base_operations]
A_deflection = "lambda df, base: df['A_displacement'] - base['A_displacement']"
B_deflection = "lambda df, base: df['B_displacement'] - base['B_displacement']"

[names.es]
L = "Longitud de tubería inclinométrica (m)"
diff_A = "Diferencia A/2"
diff_B = "Diferencia B/2"
check_A = "Verificación en eje A+"
check_B = "Verificación en eje B+"
A_cm = "A (cm)"
B_cm = "B (cm)"
A_deflection_raw = "Deflexión sin corregir en el eje A+ (cm)"
B_deflection_raw = "Deflexión sin corregir en el eje B+ (cm)"
A_displacement = "Desplazamiento en el eje A+ (cm)"
B_displacement = "Desplazamiento en el eje B+ (cm)"
A_deflection = "Deflexión en el eje A+ (cm)"
B_deflection = "Deflexión en el eje B+ (cm)"
FLEVEL = "Profundidad (cm)"
time = "Fecha de registro"

[target]
column = "A_deflection"
unit = "cm"

[inline.es]
target_phrase = "deflexión"

[process_config]
match_columns = ["time", "FLEVEL"]